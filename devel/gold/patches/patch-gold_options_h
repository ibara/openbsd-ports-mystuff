$OpenBSD$

Default to -pie. Let -nopie work.
Add -z wxneeded option (and -z nowxneeded option)
.openbsd.randomdata and .openbsd.wxneeded support

Index: gold/options.h
--- gold/options.h.orig
+++ gold/options.h
@@ -1089,13 +1089,17 @@ class General_options
   DEFINE_bool(p, options::ONE_DASH, 'p', false,
 	      N_("Ignored for ARM compatibility"), NULL);
 
-  DEFINE_bool(pie, options::ONE_DASH, '\0', false,
+  DEFINE_bool(pie, options::ONE_DASH, '\0', true,
 	      N_("Create a position independent executable"),
 	      N_("Do not create a position independent executable"));
   DEFINE_bool_alias(pic_executable, pie, options::TWO_DASHES, '\0',
 		    N_("Create a position independent executable"),
 		    N_("Do not create a position independent executable"),
 		    false);
+  DEFINE_bool_alias(nopie, pie, options::ONE_DASH, '\0',
+		    N_("Create a position independent executable"),
+		    N_("Do not create a position independent executable"),
+		    false);
 
   DEFINE_bool(pic_veneer, options::TWO_DASHES, '\0', false,
 	      N_("Force PIC sequences for ARM/Thumb interworking veneers"),
@@ -1488,6 +1492,8 @@ class General_options
   DEFINE_bool(now, options::DASH_Z, '\0', false,
 	      N_("Mark object for immediate function binding"),
 	      NULL);
+  DEFINE_bool(nowxneeded, options::DASH_Z, '\0', false,
+	      N_("Mark output as not requiring wxneeded"), NULL);
   DEFINE_bool(origin, options::DASH_Z, '\0', false,
 	      N_("Mark DSO to indicate that needs immediate $ORIGIN "
 		 "processing at runtime"), NULL);
@@ -1510,6 +1516,8 @@ class General_options
 	      N_("Keep .text.hot, .text.startup, .text.exit and .text.unlikely "
 		 "as separate sections in the final binary."),
 	      N_("Merge all .text.* prefix sections."));
+  DEFINE_bool(wxneeded, options::DASH_Z, '\0', false,
+	      N_("Mark output as requiring wxneeded"), NULL);
 
 
  public:
@@ -1539,7 +1547,7 @@ class General_options
   // the output is position-independent or not.
   bool
   output_is_position_independent() const
-  { return this->shared() || this->pie(); }
+  { return this->pie(); }
 
   // Return true if the output is something that can be exec()ed, such
   // as a static executable, or a position-dependent or
@@ -1598,6 +1606,10 @@ class General_options
   { return this->execstack_status_ != EXECSTACK_FROM_INPUT; }
 
   bool
+  is_wxneeded_set() const
+  { return this->wxneeded_status_ != WXNEEDED_FROM_INPUT; }
+
+  bool
   is_stack_executable() const
   { return this->execstack_status_ == EXECSTACK_YES; }
 
@@ -1775,6 +1787,17 @@ class General_options
     EXECSTACK_NO
   };
 
+  // Whether to mark the binary as wxneeded.
+  enum Wxneeded
+  {
+    // Not set on command line.
+    WXNEEDED_FROM_INPUT,
+    // Mark the binary as wxneeded (-z wxneeded).
+    WXNEEDED_YES,
+    // Mark the binary as not wxneeded (-z nowxneeded).
+    WXNEEDED_NO
+  };
+
   enum Icf_status
   {
     // Do not fold any functions (Default or --icf=none).
@@ -1794,6 +1817,10 @@ class General_options
   { this->execstack_status_ = value; }
 
   void
+  set_wxneeded_status(Wxneeded value)
+  { this->wxneeded_status_ = value; }
+
+  void
   set_do_demangle(bool value)
   { this->do_demangle_ = value; }
 
@@ -1829,6 +1856,8 @@ class General_options
   bool printed_version_;
   // Whether to mark the stack as executable.
   Execstack execstack_status_;
+  // Whether to mark the binary as wxneeded.
+  Wxneeded wxneeded_status_;
   // Whether to do code folding.
   Icf_status icf_status_;
   // Whether to do a static link.
